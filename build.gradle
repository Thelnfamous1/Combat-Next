plugins {
    id "dev.architectury.loom" version "1.1-SNAPSHOT"
    id 'eclipse'
    id 'idea'
    id "maven-publish"
    id 'com.github.johnrengelman.shadow' version "7.1.2" apply false
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    // use this if you are using the official mojang mappings
    // and want loom to stop warning you about their license
    silentMojangMappingsLicense()

    // since loom 0.10, you are **required** to use the
    // "forge" block to configure forge-specific features,
    // such as the mixinConfigs array or datagen
    forge {
        convertAccessWideners = true
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!
        mixinConfigs = [
                "combat_next.mixins.json"
        ]

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)
    }
}

repositories {
    // Put repositories for dependencies here
    mavenCentral()
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // choose what mappings you want to use here
    // leave this uncommented if you want to use
    // mojang's official mappings, or feel free
    // to add your own mappings here (how about
    // mojmap layered with parchment, for example?)
    mappings loom.officialMojangMappings()

    // uncomment this if you want to use yarn mappings
    // mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // your forge dependency, this is **required** when using Forge Loom in forge mode!
    forge "net.neoforged:forge:${minecraft_version}-${neo_version}"
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0-rc.3"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.2.0-rc.3"))
    modRuntimeOnly("curse.maven:enchdesc-250419:${enchdesc_version}")
    modRuntimeOnly("curse.maven:bookshelf-228525:${bookshelf_version}")

    // additional dependencies can be specified using loom's regular format
    // specifying a "mod" dependency (like modImplementation or modApi)
    // will cause loom to remap the file to your specified mappings

    // in this example, we'll be adding JEI as a dependency
    // according to their developer example on GitHub
    // see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
    // compile against the JEI API but do not include it at runtime
    // don't worry about loom "not finding a forge mod" here,
    // JEI's api just doesn't have any class with an @Mod annotation
    // modCompileOnly "mezz.jei:jei-@MINECRAFT@:${jei_version}:api"
    // at runtime, use the full JEI jar
    // modRuntimeOnly "mezz.jei:jei-@MINECRAFT@:${jei_version}"
}

processResources {
    duplicatesStrategy = 'exclude'
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.modid,
                "Specification-Vendor"    : "Infamous Mods",
                "Specification-Version"   : "1",
                "Implementation-Title"    : "Combat Next",
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "Infamous Mods",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}